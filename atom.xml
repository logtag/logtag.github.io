<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>logtag</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-02T04:31:34.576Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>logtag</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置环境变量</title>
    <link href="http://example.com/build_configurations/"/>
    <id>http://example.com/build_configurations/</id>
    <published>2022-10-06T14:49:33.000Z</published>
    <updated>2022-12-02T04:31:34.576Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何利用 Build Configurations 配置环境变量。</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在一般的测试中，我们都会在不同的场景下进行测试。例如，DEV(Development System)，UAT(User Acceptance Testing) ，SIT(System Integration Testing) 等各种场景。在这些场景中，我们可能会赋予 App 不同的形式和功能，以方便团队的开发测试。例如 App 名字（ProjectDEV，ProjectUA），图标（图片1，图片2）等。另外一些实验性的功能并不会在发布场景下出现，但在 DEV 下会保留。</p><p>因此，如何快速地在各个场景中切换，是我们必须要面对的问题。处理不同场景的切换的方法一般有 3 种。分别是：</p><ul><li>Build Configurations</li><li>xcconfig 文件</li><li>Targets</li></ul><p>目前本文只探讨 Build Configurations 的使用，至于 xcconfig 文件和 Targets，以后有机会再分享。</p><p>Build Configurations 顾名思义是配置的意思，它是 Xcode 上的一个用来配置各种环境的功能。在新建一个项目后，在 Project-&gt;Info 那里就会看到 Configurations。它有 Debug 和 Release 2 个选项。</p><h4 id="各种环境"><a href="#各种环境" class="headerlink" title="各种环境"></a>各种环境</h4><p>接下来，我们就可以利用 Configurations 配置需要的环境。例如，我们需要一个 DEV 环境用来自测，一个 UAT 环境用来给测试人员以及一个 Production 版本上线。我们在 Build 的时候就需要 Build 3 个版本了。另外，为了方便调试代码，我们还会做一些额外的工作。正如 Xcode 上默认的那 2 个环境（Debug 和 Release）那样，区分好调试的环境和出 Build 的环境。如此算来，就要 2＊3 &#x3D; 6 种环境了。分别是 DebugDEV, DebugUAT, DebugProduction, DEV, UAT, Production。</p><p>一般来说，带有 Debug 前缀的环境是方便程序员来调试的。例如自定义的 NSLog，在 Debug 的时候，会在控制台输出各种信息。但出 Build 的时候会禁用掉 NSLog，毕竟那也会影响一丢丢性能的。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>配置环境变量的步骤比较简单：</p><ol><li><p>在 <code>PROJECT</code> –&gt; <code>Info</code> –&gt; <code>Configurations</code> 点击“+”按钮，将会看到 Duplicate “Debug” Configuration 和 Duplicate “Release” Configuration 2 个选项；</p></li><li><p>这 2 个选项对应调试环境和出 Build 的环境，所以我们需要分别对 <code>Debug</code> 和 <code>Release</code> 复制出 DEV, UAT, Production 这 3 个环境变量。即 <code>Debug</code> 下复制出 DebugDEV, DebugUAT, DebugProduction。<code>Release</code> 复制出 DEV, UAT, Production；<img src="/../image/config_list.png"></p></li><li><p>在 <code>TARGETS</code> –&gt; <code>Build Settings</code> 那里找到 Preprocessor Macros，系一些宏定义，方便区分各种环境。<img src="/../image/config_macros.png"></p></li></ol><h4 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h4><p>需要注意的是，如果你的项目中有用到 CocoaPods，那么在设置完后就需要运行一下 pod install 命令。</p><p>一般情况下做到这里，一个简易的可控环境变量就完成了。需要 Build app 的时候，只需要到 Edit Scheme -&gt; Archive -&gt; Build Configuration 中选择好对应的环境就可以了。</p><h4 id="结合-Scheme"><a href="#结合-Scheme" class="headerlink" title="结合 Scheme"></a>结合 Scheme</h4><p>我们可以通过 Scheme 与 Build Configurations 结合使用，达到更方便切换环境的目的。</p><p>方法很简单。在 Scheme 那里选中 New Scheme 并输入名字。本文定义了 DEV, UAT 和 Release 的环境。所以对应的 Scheme 名字也遵循这个规律。可以在项目名加上前缀或后缀，如 ProjectDEV。</p><p>接着就是 Edit Scheme，在 Edit Scheme 页面配置好对应的环境。如在 ProjectDEV 的 Scheme 里面，Run 选项选择 DebugDev，Archive 那里选择 DEV。选好对应的环境后，就大功告成了。</p><p>想要换一个环境直接选中对应的选项就可以 了。想要出 UAT 的 Build，选中 ProjectUAT 后直接 Archive 就可以了。现在是一个 Scheme 对应一个环境。比原来需要进入 Scheme 选对应的环境方便多了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>利用 Build Configurations 配置环境变量相对于其他的方法有着如下优点：</p><ol><li>操作简单容易，不需要通过代码来区分环境，相对于 xcconfig 文件，这一点上，容易理解。</li><li>对项目影响比较小。通过 Targets 来区分环境的一个缺点就是：复制一个 Targets 就相当于复制了整个项目，有点用牛刀的感觉。另外的一点就是，以后添加资源文件等，都需要确定这些资源文件都要支持到当前这个 Targets。而 Build Configurations 则不需要这些考虑。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将介绍如何利用 Build Configurations 配置环境变量。&lt;/p&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://example.com/categories/iOS/"/>
    
    
    <category term="Configurations" scheme="http://example.com/tags/Configurations/"/>
    
  </entry>
  
  <entry>
    <title>自定义 UITabBar</title>
    <link href="http://example.com/custom_tabbar/"/>
    <id>http://example.com/custom_tabbar/</id>
    <published>2022-08-22T13:30:00.000Z</published>
    <updated>2022-12-02T04:31:20.761Z</updated>
    
    <content type="html"><![CDATA[<p>在一些需要使用 UITabBar 的项目中，目前大家的做法都是使用默认的样式。为了不显得那么丑，一般的做法也就更改一下选中的 item 的颜色，避免出现默认的蓝色的标题和图标。但是（不错，就是这个但是），如果当我点击 TabBar 中的某个 item 的时候，这个 item 的背景颜色应该要高亮。这样用户就会更加地容易知道当前点击的位置了（嗯，好像很有道理）。</p><span id="more"></span><p>如下图这个样子。<br><img src="/../image/tabbar_preview.jpg"></p><p>为了实现这个效果，我决定首先看看 UITabBar 有没有现成的方法。然而，并没有啊。既然 UITabBar 没有提供现成的方法，那么下一步的做法就是自定义一个 UITabBar 了。准备好了？GO!!!</p><h3 id="开始前的准备"><a href="#开始前的准备" class="headerlink" title="开始前的准备"></a>开始前的准备</h3><p>在自定义 UITabBar 之前需要把基本的架构做好。创建一个名为 <code>TabBarViewController</code> 的类，作为 window 的 rootViewController。接着再创建几个 UIViewController 的对象，对应到 UITabBar 的 item。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">       </span><br><span class="line">    tabBar.isTranslucent <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">4</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> viewController <span class="operator">=</span> <span class="type">UIViewController</span>.<span class="keyword">init</span>()</span><br><span class="line">        viewController.view.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.<span class="keyword">init</span>(colorLiteralRed: <span class="type">Float</span>(i) <span class="operator">*</span> <span class="number">0.18</span> <span class="operator">+</span> <span class="number">0.2</span>, green: <span class="number">1.0</span> <span class="operator">-</span> <span class="type">Float</span>(i) <span class="operator">*</span> <span class="number">0.5</span> <span class="operator">+</span> <span class="number">0.1</span>, blue: <span class="number">1.0</span> <span class="operator">-</span> <span class="type">Float</span>(i) <span class="operator">*</span> <span class="number">0.18</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">        <span class="keyword">self</span>.addChildViewController(viewController)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义-UITabBar"><a href="#自定义-UITabBar" class="headerlink" title="自定义 UITabBar"></a>自定义 UITabBar</h3><p>这里需要创建 2 个类，分别是 <code>CustomTabBar</code> 和 <code>CustomTabBarItem</code>，都继承于 <code>UIView</code>。它们的作用显而易见，<code>CustomTabBar</code> 用来“代替”系统的 UITabBar，而 <code>CustomTabBarItem</code> 则是 <code>CustomTabBar</code> 的 subView，作为 tabBar 上的元素。</p><h4 id="CustomTabBar-的构成"><a href="#CustomTabBar-的构成" class="headerlink" title="CustomTabBar 的构成"></a>CustomTabBar 的构成</h4><p><code>CustomTabBar</code> 在初始化的时候要配置好 <code>CustomTabBarItem</code> 对象，对其进行 addSubView 和 Frame 调整的操作。<br>整个类的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomTabBar</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> selectedIndex: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            configItemWithSeldctedIndex(index: selectedIndex)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.darkGray</span><br><span class="line">        configTabBarItem()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">layoutSubviews</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> i: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> tabBarItem <span class="keyword">in</span> subviews &#123;</span><br><span class="line">            <span class="keyword">let</span> width <span class="operator">=</span> <span class="type">UIScreen</span>.main.bounds.width <span class="operator">/</span> <span class="number">5.0</span></span><br><span class="line">            <span class="keyword">if</span> tabBarItem <span class="keyword">is</span> <span class="type">CustomTabBarItem</span> &#123;</span><br><span class="line">                tabBarItem.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="type">CGFloat</span>(i) <span class="operator">*</span> width, y: <span class="number">0</span>, width: width, height: <span class="keyword">self</span>.bounds.height)</span><br><span class="line">                i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">configTabBarItem</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> tabBarItem <span class="operator">=</span> <span class="type">CustomTabBarItem</span>()</span><br><span class="line">            tabBarItem.title <span class="operator">=</span> <span class="string">&quot;Item<span class="subst">\(i)</span>&quot;</span></span><br><span class="line">            tabBarItem.isSelected <span class="operator">=</span> i <span class="operator">==</span> <span class="number">0</span></span><br><span class="line">            addSubview(tabBarItem)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">configItemWithSeldctedIndex</span>(<span class="params">index</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> tabBarItem <span class="keyword">as</span> <span class="type">CustomTabBarItem</span> <span class="keyword">in</span> subviews &#123;</span><br><span class="line">            tabBarItem.isSelected <span class="operator">=</span> index <span class="operator">==</span> i</span><br><span class="line">            i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还好代码不是很多。开始初始化的时候调用了 <code>configTabBarItem()</code> 方法，用来 addSubView <code>CustomTabBarItem</code> 对象。在 <code>layoutSubviews()</code> 方法中，调整 <code>CustomTabBarItem</code> 对象的 Frame。</p><h4 id="CustomTabBarItem-的构成"><a href="#CustomTabBarItem-的构成" class="headerlink" title="CustomTabBarItem 的构成"></a>CustomTabBarItem 的构成</h4><p><code>CustomTabBarItem</code> 的构成更为简单。主要是显示 title。<br>这个类的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomTabBarItem</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span>? &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            titleLabel.text <span class="operator">=</span> title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> titleLabel: <span class="type">UILabel</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">        label.textColor <span class="operator">=</span> <span class="type">UIColor</span>.white</span><br><span class="line">        label.font <span class="operator">=</span> <span class="type">UIFont</span>.boldSystemFont(ofSize: <span class="number">15</span>)</span><br><span class="line">        label.textAlignment <span class="operator">=</span> <span class="type">NSTextAlignment</span>.center</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">var</span> isSelected: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> isSelected <span class="operator">==</span> <span class="literal">true</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;selected&quot;</span>)</span><br><span class="line">                backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.purple</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;noSelect&quot;</span>)</span><br><span class="line">                backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.darkGray</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        </span><br><span class="line">        addSubview(titleLabel)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">layoutSubviews</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line">        </span><br><span class="line">        titleLabel.frame <span class="operator">=</span> bounds</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CustomTabBarItem</code> 目前只加了一个 Label，用来显示标题。如果想要加上图片，过程跟添加 Label 差不多。</p><p>代码写到这里，基本上完成了自定义 UITabBar。剩下的就是在 <code>TabBarViewController</code> 中配置好 <code>CustomTabBar</code> 了。</p><h3 id="使用-CustomTabBar"><a href="#使用-CustomTabBar" class="headerlink" title="使用 CustomTabBar"></a>使用 CustomTabBar</h3><p>使用 <code>CustomTabBar</code> 的过程变得非常简单，只需要几行代码就可以看到效果了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customTabBar <span class="operator">=</span> <span class="type">CustomTabBar</span>()</span><br></pre></td></tr></table></figure><p>在 <code>TabBarViewController</code> 的 <code>viewDidLoad()</code> 方法中添加一下 2 行代码就可以了————还记得本文开头那里准备 <code>TabBarViewController</code> 的代码吗？没错，就是那个 <code>viewDidLoad</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">customTabBar.frame <span class="operator">=</span> tabBar.bounds</span><br><span class="line">tabBar.addSubview(customTabBar)</span><br></pre></td></tr></table></figure><p>最后，为了实现切换后高亮 item 的效果，需要实现一个 <code>UITabBarDelegate</code> 的代理方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tabBar</span>(<span class="keyword">_</span> <span class="params">tabBar</span>: <span class="type">UITabBar</span>, <span class="params">didSelect</span> <span class="params">item</span>: <span class="type">UITabBarItem</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index: <span class="type">Int</span>? <span class="operator">=</span> tabBar.items<span class="operator">?</span>.index(of: item)</span><br><span class="line">    selectedIndex <span class="operator">=</span> index<span class="operator">!</span></span><br><span class="line">    customTabBar.selectedIndex <span class="operator">=</span> index<span class="operator">!</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>最后的步骤也完成了，看看效果如何。<br><img src="/../image/tabbar_full.jpg"><br>是不是挺不错，哈哈。</p><h4 id="存疑"><a href="#存疑" class="headerlink" title="存疑"></a>存疑</h4><p><code>UITabBarController</code> 有一个 <code>selectedIndex</code> 的属性，起初我以为这个属性代表的是当前 item 的 index。然而，在 <code>UITabBarDelegate</code> 的 <code>tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem)</code> 方法中，print 出 <code>selectedIndex</code> 的值竟然是上一次点击 item 的 index。有趣的是，这个代理方法中，所点的 item 并不是 <code>selectedIndex</code> 对应的 item。这个是真・当前的 item。<br>目前的解决方法是利用这个代理方法中的 item 来获取其所在的 index，然后把这个 index 赋值给 <code>selectedIndex</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> index: <span class="type">Int</span>? <span class="operator">=</span> tabBar.items<span class="operator">?</span>.index(of: item)</span><br><span class="line">selectedIndex <span class="operator">=</span> index<span class="operator">!</span></span><br><span class="line">customTabBar.selectedIndex <span class="operator">=</span> index<span class="operator">!</span></span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>正如前面所说的，在 <code>UITabBarDelegate</code> 的 <code>tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem)</code> 代理方法中，<code>selectedIndex</code> 并不是正确的 <code>selectedIndex</code>。那么有没有另外的方法存在着正确的 <code>selectedIndex</code> 呢？<br>答案是当然有啦。这次的目光放到了 <code>UITabBarControllerDelegate</code> 这个代理。在 <code>tabBarController(_ tabBarController: UITabBarController, didSelect viewController: UIViewController)</code> 的代理方法中 <code>selectedIndex</code> 是正确的。所以在这个方法里可以放心地赋值了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">TabBarViewController</span>: <span class="title class_">UITabBarControllerDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">tabBarController</span>(<span class="keyword">_</span> <span class="params">tabBarController</span>: <span class="type">UITabBarController</span>, <span class="params">didSelect</span> <span class="params">viewController</span>: <span class="type">UIViewController</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;index:<span class="subst">\(selectedIndex)</span>&quot;</span>)</span><br><span class="line">        customTabBar.selectedIndex <span class="operator">=</span> selectedIndex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哦，对了，不要忘记了设置代理。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delegate <span class="operator">=</span> <span class="keyword">self</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文粗略地实现了自定义 UITabBar，当中还有比较多的不完善的地方。例如 <code>TabBarViewController</code> 所添加的 viewController 数量没有与 <code>CustomTabBar</code> 的 item 数量对接上。另外一个不那么完善的地方是更改 item 选中背景的方法可能并不是很好（使用 for 循环解决），即使不影响选中的效果。在整个过程中，核心方法就是利用 <code>TabBarViewController</code> 的 tabBar 属性（继承于 UIView）进行 addSubView。利用这一点，后面的步骤就比较简单了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在一些需要使用 UITabBar 的项目中，目前大家的做法都是使用默认的样式。为了不显得那么丑，一般的做法也就更改一下选中的 item 的颜色，避免出现默认的蓝色的标题和图标。但是（不错，就是这个但是），如果当我点击 TabBar 中的某个 item 的时候，这个 item 的背景颜色应该要高亮。这样用户就会更加地容易知道当前点击的位置了（嗯，好像很有道理）。&lt;/p&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://example.com/categories/iOS/"/>
    
    
    <category term="UITabBar" scheme="http://example.com/tags/UITabBar/"/>
    
  </entry>
  
  <entry>
    <title>所见即所得（下）——通过 XIB 自定义 UITableViewHeaderFooterView</title>
    <link href="http://example.com/custom_headerfooterview/"/>
    <id>http://example.com/custom_headerfooterview/</id>
    <published>2022-06-12T13:00:00.000Z</published>
    <updated>2022-12-02T04:30:40.450Z</updated>
    
    <content type="html"><![CDATA[<p>自定义 UIView 在 iOS 开发中是比较常用的。在这篇文章中，将介绍如何通过 XIB 自定义 UITableViewHeaderFooterView。<code>UITableViewHeaderFooterView</code> 是用来定义 UITableView 的 header 或 footer 的。创建一个继承自 UITableViewHeaderFooterView 的子类的时候，Xcode 是不会自动创建一个 XIB 文件的。这个情况跟自定义 UIView 是一样的。所以，我们也就可以通过单独创建一个 XIB 文件来实现我们的目的了。</p><span id="more"></span><p>下面我们将以 CustomSectionView 为例，描述如何通过 XIB 实现自定义 UITableViewHeaderFooterView 的过程。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>分别创建一个继承于 <code>UITableViewHeaderFooterView</code> 的类以及一个 XIB 文件（应该同名）；<br><img src="/../image/custom_header_xib.png"></p></li><li><p>选中 XIB 文件后，继续选中 <code>View</code>，把 Class 改为 <code>CustomSectionView</code>；<br><img src="/../image/custom_header_class.png"></p></li><li><p>在 UITableView 的代理对象(一般是 ViewController)中注册 XIB 文件，并在实现其当中的代理方法；</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    [self.homeTableView registerNib:[UINib nibWithNibName:@&quot;CustomSectionView&quot; bundle:nil]forHeaderFooterViewReuseIdentifier:@&quot;customSectionView&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section &#123;</span><br><span class="line">    return 40;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section &#123;</span><br><span class="line">    CustomSectionView *headerView = [tableView dequeueReusableHeaderFooterViewWithIdentifier:@&quot;customSectionView&quot;];</span><br><span class="line">    </span><br><span class="line">    return headerView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="需要注意的"><a href="#需要注意的" class="headerlink" title="需要注意的"></a>需要注意的</h3><p>经过上述 3 个步骤，一个通过 XIB 自定义 UITableViewHeaderFooterView 的过程就顺利完成了。<br>需要注意的是，上述的过程只是定义了一个 UITableView 的 header。事实上，不但能够定义 header 也可以定义 footer。在定义 footer 的时候，实现的代理方法只是变成了 <code>viewForFooterInSection:</code>。<br>好了，现在运行一下看看，跟预想中的一样。然而，Xcode 在这里抛出了一个提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Setting the background color on UITableViewHeaderFooterView has been deprecated. Please use contentView.backgroundColor instead.</span><br></pre></td></tr></table></figure><p>有这样的警告是因为 XIB 的 View 的 BackgroundColor 不是透明的。要去掉这个提示，就需要把它的 BackgroundColor 改为透明色的就可以了。<br><img src="/../image/custom_header_bgcolor.png"></p><p>现在再运行一个看看，那个警告是不是没有了呢。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>UITableViewHeaderFooterView 在 UITableView 中的作用不仅仅是显示一个 title，更多的时候需要进行深度的自定义，例如加多一个 SubTitle。这个时候，自定义 UITableViewHeaderFooterView 就变得十分的有必要了，正如自定义 UITableViewCell 一样。而通过加入 XIB 使得这个自定义的过程变得可视化，所见即所得。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自定义 UIView 在 iOS 开发中是比较常用的。在这篇文章中，将介绍如何通过 XIB 自定义 UITableViewHeaderFooterView。&lt;code&gt;UITableViewHeaderFooterView&lt;/code&gt; 是用来定义 UITableView 的 header 或 footer 的。创建一个继承自 UITableViewHeaderFooterView 的子类的时候，Xcode 是不会自动创建一个 XIB 文件的。这个情况跟自定义 UIView 是一样的。所以，我们也就可以通过单独创建一个 XIB 文件来实现我们的目的了。&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://example.com/categories/Blog/"/>
    
    
    <category term="UIView" scheme="http://example.com/tags/UIView/"/>
    
  </entry>
  
  <entry>
    <title>所见即所得（上）——通过 XIB 自定义 UIView</title>
    <link href="http://example.com/custom_uiview/"/>
    <id>http://example.com/custom_uiview/</id>
    <published>2022-04-06T13:30:00.000Z</published>
    <updated>2022-12-02T04:30:12.994Z</updated>
    
    <content type="html"><![CDATA[<p>所见即所得符合视觉动物的直觉。</p><span id="more"></span><h3 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h3><p>创建一个继承自 UIView 的类的时候，Xcode 是不会给你创建对应的 XIB 文件的（没有勾选框给你）。这个对于视觉性动物来说是说不过去的。</p><p>有意思的是，Xcode 是允许你单独创建一个 XIB 文件的。所以，是可以通过 XIB 自定义 UIView 的。这种所见即所得的快感当然是不容错过的。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>具体的操作步骤比较简单，主要分为 4 步。这里创建一个名为 StarView 的类（只是用来展示星星符号的，意思意思就可以了，哈哈），话不多说，直接开干。</p><ol><li><p>分别创建一个继承自 UIView 的类以及一个 XIB 文件（应该同名）；<br><img src="/../image/custom_xib.png"></p></li><li><p>选中 XIB 文件，把 File’s Owner 设置为对应的类名；<br><img src="/../image/custom_fileowner.png"></p></li><li><p>选中 XIB 中的 View，并把 View connect 到类当中。<br><img src="/../image/custom_connent.png"></p></li><li><p>最后一步就是实现以下代码：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithFrame:(CGRect)frame &#123;</span><br><span class="line">    if (self = [super initWithFrame:frame]) &#123;</span><br><span class="line">        self.contentView = [self loadViewFromNib];</span><br><span class="line">        [self addSubview:self.contentView];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithCoder:(NSCoder *)aDecoder &#123;</span><br><span class="line">    if (self = [super initWithCoder:aDecoder]) &#123;</span><br><span class="line">        self.contentView = [self loadViewFromNib];</span><br><span class="line">        [self addSubview:self.contentView];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIView *)loadViewFromNib &#123;</span><br><span class="line">    UIView *theView = [[NSBundle mainBundle] loadNibNamed:@&quot;StarView&quot; owner:self options:nil][0];</span><br><span class="line">    theView.frame = self.bounds;</span><br><span class="line">    </span><br><span class="line">    return theView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>这里解析一下代码的意义。</p><p>代码里用到了 <code>initWithFrame:</code> 和 <code>initWithCoder:</code> 这 2 个初始化的方法。在外部创建一个 StarView 对象的时候，无论是代码创建还是拖动控件，都能够调用到 <code>loadViewFromNib</code> 这个方法。</p><h3 id="一点修饰"><a href="#一点修饰" class="headerlink" title="一点修饰"></a>一点修饰</h3><p>既然这是一个 StarView，那么就应该有几个星星在里面。星星的形状很容易绘制，就是一个字符串 ★。</p><p><img src="/../image/custom_star.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在使用这个自定义类的时候，可以很简单地创建出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StarView *starView = [[StarView alloc] initWithFrame:CGRectMake(20, 20, 300, 40)];</span><br><span class="line">[self.view addSubview:starView];</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很好，我喜欢这个方法，哈哈。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;所见即所得符合视觉动物的直觉。&lt;/p&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://example.com/categories/iOS/"/>
    
    
    <category term="UIView" scheme="http://example.com/tags/UIView/"/>
    
  </entry>
  
  <entry>
    <title>你值得拥有——通过 GitHub + Hexo 搭建博客</title>
    <link href="http://example.com/build_blog/"/>
    <id>http://example.com/build_blog/</id>
    <published>2022-01-31T14:30:31.000Z</published>
    <updated>2022-12-02T04:27:29.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../image/blog.jpg"></p><blockquote><p>拥有属于自己的博客是很值得炫耀的。<br>by 尼古拉斯・赵四</p></blockquote><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>搭建博客的过程应当是愉悦的，它不仅能给我们一个展示自我的空间，同时还能够体验到自定义的快乐。然而，在搭建这个博客之前，我们还是有必要了解一下什么是 GitHub，什么是 Hexo，以及它们在搭建博客的过程中扮演着怎样的角色。毕竟，在了解清楚后，接下来的搭建博客的过程也将是清晰明了、如鱼得水。</p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p><a href="https://github.com/">GitHub</a> 相当于一个仓库，可以用它来存放各种文件，包括文本、图片等。既然是 Git，当然是主要用来放代码的啦。那么，这个跟搭建博客有什么关系呢。其实，我们所看到的博客就是一系列数字信息的集合，这些信息包括了博文、图片、声音以及展现博客的代码。所以，GitHub 就是用来存放博客信息的，没有了存放信息的仓库，那么博客则无从安放。</p><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p><a href="https://hexo.io/">Hexo</a> 是一个博客的框架。一般来说，博客是由博文、作者相关信息等部分组成。如果由你来搭建这个博客，那么你需要思考的问题应该是这样的：</p><ul><li>文章应该如何展示；</li><li>菜单栏应该放在上边还是左边；</li><li>整体的风格是放荡不羁型还是你若安好便是晴天型；</li><li>博客的主题颜色是五光十色还是五颜六色；</li><li>……</li></ul><p>要考虑到这么多繁琐却又不得不要解决的问题，我相信很多人是没有这个耐心的。这时，你需要的是一个能够快速解决这些问题的工具。 而 Hexo 就是这样的一个工具。它能够自动帮助你快速生成博客的样式。在这个过程中，你甚至不需要写代码。所以，Hexo 是一个博客的框架，这句话可以这样理解：<strong>通过 Hexo，我可以很快搭建出一个博客应有的样子。我所需要做的就是写好我的文章，然后发布出去。</strong></p><p>那么，通过 GitHub 与 Hexo 搭建博客的过程可以理解成这样：<br>Hexo 帮助你自动生成了博客所需要的代码，然后上传到 GitHub 当中，这时 GitHub 就会运行这些代码，变成了博客网站的样子了。</p><h3 id="搭建博客前的准备工作"><a href="#搭建博客前的准备工作" class="headerlink" title="搭建博客前的准备工作"></a>搭建博客前的准备工作</h3><p>到这里，我们知道了 GitHub 和 Hexo 的概念了。在搭建博客前，需要做好一些准备工作。这些准备工作很简单，就是搭建环境。<br>这里的环境包括了：</p><ul><li>能够上传文件到 GitHub 的环境；</li><li>运行 Hexo 的环境。</li></ul><p>那么如何把博客数据存放到 GitHub 上呢？答案是通过 Git 来上传。在这里，Git 的作用就是一个上传工具。通过它就可以把博客数据上传到 GitHub 了。所以搭建上传文件到 GitHub 的环境就是安装 Git。在这个<a href="https://git-scm.com/">网站</a>就可以找到安装 Git 的方法了。</p><p>接下来就是搭建一个能够运行 Hexo 的环境了。这里需要安装 Node.js，可以到<a href="https://nodejs.org/">官网</a>下载直接下载文件安装就可以了。安装好后就相当于搭建好了运行 Hexo 的环境了。</p><p>安装 Git 和 Node.js 可以不用命令行来安装，在它们各自的网站上下载文件安装就好了，简单快捷。</p><h3 id="搭建博客的过程"><a href="#搭建博客的过程" class="headerlink" title="搭建博客的过程"></a>搭建博客的过程</h3><p>通过上述的准备，我们就可以开始搭建博客了，想想都很激动。</p><h4 id="GitHub-部分"><a href="#GitHub-部分" class="headerlink" title="GitHub 部分"></a>GitHub 部分</h4><p>这里要做以下几步：</p><ul><li>需要一个 GitHub 帐号（没有的就去注册一个吧），并登录进去。</li><li>创建一个仓库，其名称为 <code>user_name.github.io</code> 这样的格式。</li><li>添加 SSH Key 到你的 GitHub 上。</li></ul><p>登录 GitHub 后，点击右边的 <code>New repository</code> 按钮，用来创建一个项目。<br><img src="/../image/blog_new_repository.png"><br>进入下一页后输入你的项目名称，格式是 <code>yourname.github.io</code>。<br>接着点击下面绿色的<code>Create repository</code>按钮。<br><img src="/../image/blog_create_repository.png"><br>经过以上 2 步的操作就添加了一个仓库了，而这个仓库就是你的博客的大本营了。</p><p>接着要说一下第 3 步，创建 SSH Key 了。创建 SSH Key 的其中一个好处就是上传文件到 GitHub 的时候不用每次都要输入密码。<br>进入 GitHub 的设置页面，找到 <code>SSH and GPG keys</code> 这个选项，并点击进入。<br><img src="/../image/blog_menu.png"></p><p>页面上有教你如何创建 SSH Key 的。如果在 SSH Key 上遇到问题，可以通过这个<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">网址</a>来解决。<br><img src="/../image/blog_ssh.png"></p><p>翻译过来就是：</p><ul><li>检查电脑是否存在 SSH Keys；</li><li>创建一个新的 SSH Key 并添加到 <code>ssh-agent</code> 当中，其中 <code>ssh-agent</code> 是一个密钥管理器；</li><li>添加 SSH Key 到你的 GitHub 中；</li><li>测试你的 SSH 是否可以已经接通了。</li></ul><p>具体的操作可以点击上面连接查看，很简单的。这里就不再叙述了。</p><h4 id="Hexo-部分"><a href="#Hexo-部分" class="headerlink" title="Hexo 部分"></a>Hexo 部分</h4><p>打开 Hexo 的<a href="https://hexo.io/">官网</a>，拉到最底部，可以看到有几个命令行。其实这几句命令就是安装 Hexo 的命令，跟着它做就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>要注意以下几点：</p><ul><li>如果执行第一个命令出现了错误时，可以尝试在前面加上 sudo，即 <code>sudo npm install hexo-cli  -g</code><br>因为它可能需要管理员权限；</li><li>第 2 步的 <code>hexo init blog</code> 表示在一个名为 blog 的文件夹创建 Hexo 所需要的文件，用来存放 Hexo 的所有数据。它的位置在 <code>/Users/computer_name/blog</code> 。所以，如果不喜欢 blog 这个名字，那么完全可以用另外一个，例如 MyBlog 等等；</li><li>接着执行 <code>cd blog</code>，进入博客的目录；</li><li>进入目录后就是执行 <code>npm install</code> 命令进行安装了，在安装的过程中如果出现问题，例如卡住了，我的做法是重新打开终端，重新安装。当然，最好是在自由的网络环境下，这样能够保证成功安装。当安装好了以后，那么你的博客就已经在本地创建成功了；</li><li>接下来就是 <code>hexo server</code> 命令了，这个命令表示本地调试，在浏览器中输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到你的博客了。通过 <code>Ctrl+C</code> 来停止本地测试。</li></ul><h4 id="把博客上传到-GitHub-中"><a href="#把博客上传到-GitHub-中" class="headerlink" title="把博客上传到 GitHub 中"></a>把博客上传到 GitHub 中</h4><p>到目前为止，你的博客只能够在本地查看，网上是看不到的。这是因为经过了以上的操作，我们已经把博客成功地创建在本地。另外，我们也应该注意到，目前 GitHub 和 Hexo 还没有产生过任何的联系。所以，GitHub 和 Hexo 的操作步骤都是独立的，你可以先安装 Hexo，也可以先安装 GitHub。</p><p>接下来要做的就是把本地的数据上传到 GitHub 上。进入博客的目录，以我的目录为例。<br>进入 Blog 目录，打开一个名为 <code>_config.yml</code> 的文件，打开方式使用文本编辑就可以了。<br><img src="/../image/blog_config.png"><br>找到一个名为 <code>deploy</code> 的标签。修改为以下的形式。其中 <code>repo</code> 后面填写的是已经创建的仓库的地址，格式是：<code>git@github.com:user_name/user_name.github.io</code><br>另外，要注意的是空格的问题。冒号: 后面是有一个空格的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:user_name/user_name.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>完成后保存文件。在这里，我们可以看到，GitHub 和 Hexo 这两条线索终于在这里交汇产生联系了。接着在终端里输入以下命令。<br><code>cd /Users/computer_name/blog</code> 进入博客目录，进入后 hexo 的相关命令才能生效。<strong>另外，需要注意的是，以后通过 hexo 命令执行博客的一些操作，例如更新博客，需要首先执行 <code>cd</code> 命令进入你的博客目录，接着才能够使用。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean  //清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo generate  //生成静态文件</span><br><span class="line">hexo deploy  //部署网站,即上传数据到仓库当中</span><br></pre></td></tr></table></figure><p>第一次上传会要你输入 GitHub 的帐号和密码，但以后就不会要求你输入密码了，因为有 SSH Key。<br>经过以上的步骤，你的博客终于可以在网上看到了（激动人心的时刻到啦！！！）。打开网址 <code>https://user_name.github.io</code> 就可以看到你的博客了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了如何通过 GitHub 和 Hexo 搭建博客。我认为最重要的应该是首先清楚 GitHub 和 Hexo 的概念，了解它们是什么，能够干什么。了解概念后，再按照步骤来做。这样顺着步骤操作的时候才不至于迷茫，傻傻分不清楚。即使步骤错误了，也知道是哪一部分出错了，改正过来也是分分钟的事。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../image/blog.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拥有属于自己的博客是很值得炫耀的。&lt;br&gt;by 尼古拉斯・赵四&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://example.com/categories/Blog/"/>
    
    
    <category term="Blog" scheme="http://example.com/tags/Blog/"/>
    
  </entry>
  
</feed>
